<?php

//clear cache
/* php artisan config:cache
php artisan route:cache
php artisan view:cache
php artisan cache:clear
rm -f storage/logs
composer clear-cache

Artisan
phpartisan--helpOR-h
phpartisan--quietOR-q
phpartisan--versionOR-V
phpartisan--no-interactionOR-n
phpartisan--ansi
phpartisan--no-ansi
phpartisan--env
phpartisan--verbose
phpartisanchanges
phpartisanclear-compiled
phpartisandown
phpartisandump-autoload
phpartisanenv
phpartisanhelp
phpartisanlist
phpartisanmigrate
phpartisanoptimize
phpartisanroutes
phpartisanserve
phpartisantinker
phpartisanup
phpartisanworkbench
phpartisanasset:publish[--bench[="vendor/package"]][--path[="..."]][package]
phpartisanauth:reminders
phpartisancache:clear
phpartisancommand:makename[--command[="..."]][--path[="..."]][--namespace[="..."]]
phpartisanconfig:publish
phpartisancontroller:make[--bench="vendor/package"]
phpartisandb:seed[--class[="..."]][--database[="..."]]
phpartisankey:generate
phpartisanmigrate[--bench="vendor/package"][--database[="..."]][--path[="..."]][--package[="..."]][--pretend][--seed]
phpartisanmigrate:install[--database[="..."]]
phpartisanmigrate:makename[--bench="vendor/package"][--create][--package[="..."]][--path[="..."]][--table[="..."]]
phpartisanmigrate:refresh[--database[="..."]][--seed]
phpartisanmigrate:reset[--database[="..."]][--pretend]
phpartisanmigrate:rollback[--database[="..."]][--pretend]
phpartisanqueue:listen[--queue[="..."]][--delay[="..."]][--memory[="..."]][--timeout[="..."]][connection]
phpartisanqueue:subscribe[--type[="..."]]queueurl
phpartisanqueue:work[--queue[="..."]][--delay[="..."]][--memory[="..."]][--sleep][connection]
phpartisansession:table
phpartisanview:publish[--path[="..."]]package
Composer
composercreate-projectlaravel/laravelfolder_name
composerinstall
composerupdate
composerdump-autoload[--optimize]
composerself-update
Routing
Route::get('foo',function(){});
Route::get('foo','ControllerName@function');
Route::controller('foo','FooController');
TriggeringErrors
App::abort(404);
App::missing(function($exception){});
thrownewNotFoundHttpException;
RouteParameters
Route::get('foo/{bar}',function($bar){});
Route::get('foo/{bar?}',function($bar='bar'){});
HTTPVerbs
Route::any('foo',function(){});
Route::post('foo',function(){});
Route::put('foo',function(){});
Route::patch('foo',function(){});
Route::delete('foo',function(){});
//RESTfulactions
Route::resource('foo','FooController');
SecureRoutes
Route::get('foo',array('https',function(){}));
RouteConstraints
Route::get('foo/{bar}',function($bar){})
->where('bar','[0-9]+');
Route::get('foo/{bar}/{baz}',function($bar,$baz){})
->where(array('bar'=>'[0-9]+','baz'=>'[A-Za-z]'))
Filters
//Declareanauthfilter
Route::filter('auth',function(){});
//Registeraclassasafilter
Route::filter('foo','FooFilter');
//Routesinthisgroupareguardedbythe'auth'filter
Route::get('foo',array('before'=>'auth',function(){}));
Route::group(array('before'=>'auth'),function(){});
//Patternfilter
Route::when('foo/*','foo');
//HTTPverbpattern
Route::when('foo/*','foo',array('post'));
NamedRoutes
Route::currentRouteName();
Route::get('foo/bar',array('as'=>'foobar',function(){}));
RoutePrefixing
//Thisroutegroupwillcarrytheprefix'foo'
Route::group(array('prefix'=>'foo'),function(){})
Sub-DomainRouting
//{sub}willbepassedtotheclosure
Route::group(array('domain'=>'{sub}.example.com'),function(){});
URLs
URL::full();
URL::current();
URL::previous();
URL::to('foo/bar',$parameters,$secure);
URL::action('FooController@method',$parameters,$absolute);
URL::route('foo',$parameters,$absolute);
URL::secure('foo/bar',$parameters);
URL::asset('css/foo.css',$secure);
URL::secureAsset('css/foo.css');
URL::isValidUrl('http://example.com');
URL::getRequest();
URL::setRequest($request);
URL::getGenerator();
URL::setGenerator($generator);
Events
Event::fire('foo.bar',array($bar));
Event::listen('foo.bar',function($bar){});
Event::listen('foo.*',function($bar){});
Event::listen('foo.bar','FooHandler',10);
Event::listen('foo.bar','BarHandler',5);
Event::listen('foor.bar',function($event){returnfalse;});
Event::queue('foo',array($bar));
Event::flusher('foo',function($bar){});
Event::flush('foo');
Event::subscribe(newFooEventHandler);
DB
$results=DB::select('select*fromuserswhereid=?',array('value'));
DB::insert('insertintousers(id,name)values(?,?)',array(1,'Dayle'));
DB::update('updateuserssetvotes=100wherename=?',array('John'));
DB::delete('deletefromusers');
DB::statement('droptableusers');
DB::listen(function($sql,$bindings,$time){code_here()});
DB::transaction(function(){code_here()});
Eloquent
Model::create(array('key'=>'value'));
Model::destroy(1);
Model::all();
Model::find(1);
//Triggeranexception
Model::findOrFail(1);
Model::where('foo','=','bar')->get();
Model::where('foo','=','bar')->first();
//Exception
Model::where('foo','=','bar')->firstOrFail();
Model::where('foo','=','bar')->count();
Model::where('foo','=','bar')->delete();
Model::whereRaw('foo=barandcars=2',array(20))->get();
Model::on('connection-name')->find(1);
Model::with('relation')->get();
Model::all()->take(10);
Model::all()->skip(10);
SoftDelete
Model::withTrashed()->where('cars',2)->get();
Model::withTrashed()->where('cars',2)->restore();
Model::where('cars',2)->forceDelete();
Model::onlyTrashed()->where('cars',2)->get();
Events
Model::creating(function($model){});
Model::created(function($model){});
Model::updating(function($model){});
Model::updated(function($model){});
Model::saving(function($model){});
Model::saved(function($model){});
Model::deleting(function($model){});
Model::deleted(function($model){});
Model::observe(newFooObserver);
Mail
Mail::send('email.view',$data,function($message){});
Mail::send(array('html.view','text.view'),$data,$callback);
Mail::queue('email.view',$data,function($message){});
Mail::queueOn('queue-name','email.view',$data,$callback);
Mail::later(5,'email.view',$data,function($message){});
//Writeallemailtologsinsteadofsending
Mail::pretend();
Queues
Queue::push('SendMail',array('message'=>$message));
Queue::push('SendEmail@send',array('message'=>$message));
Queue::push(function($job)use$id{});
phpartisanqueue:listen
phpartisanqueue:listenconnection
phpartisanqueue:listen--timeout=60
phpartisanqueue:work
Localization
App::setLocale('en');
Lang::get('messages.welcome');
Lang::get('messages.welcome',array('foo'=>'Bar'));
Lang::has('messages.welcome');
Lang::choice('messages.apples',10);
Files
File::exists('path');
File::get('path');
File::getRemote('path');
File::getRequire('path');
File::requireOnce('path');
File::put('path','contents');
File::append('path','data');
File::delete('path');
File::move('path','target');
File::copy('path','target');
File::extension('path');
File::type('path');
File::size('path');
File::lastModified('path');
File::isDirectory('directory');
File::isWritable('path');
File::isFile('file');
//Findpathnamesmatchingagivenpattern.
File::glob($patterns,$flag);
//Getanarrayofallfilesinadirectory.
File::files('directory');
//Getallofthefilesfromthegivendirectory(recursive).
File::allFiles('directory');
//Getallofthedirectorieswithinagivendirectory.
File::directories('directory');
File::makeDirectory('path',$mode=0777,$recursive=false);
File::copyDirectory('directory','destination',$options=null);
File::deleteDirectory('directory',$preserve=false);
File::cleanDirectory('directory');
Input
Input::get('key');
//Defaultifthekeyismissing
Input::get('key','default');
Input::has('key');
Input::all();
//Onlyretrieve'foo'and'bar'whengettinginput
Input::only('foo','bar');
//Disregard'foo'whengettinginput
Input::except('foo');
SessionInput(flash)
//Flashinputtothesession
Input::flash();
Input::flashOnly('foo','bar');
Input::flashExcept('foo','baz');
Input::old('key','default_value');
Files
//Useafilethat'sbeenuploaded
Input::file('filename');
//Determineifafilewasuploaded
Input::hasFile('filename');
//Accessfileproperties
Input::file('name')->getRealPath();
Input::file('name')->getClientOriginalName();
Input::file('name')->getSize();
Input::file('name')->getMimeType();
//Moveanuploadedfile
Input::file('name')->move($destinationPath);
//Moveanuploadedfile
Input::file('name')->move($destinationPath,$fileName);
Cache
Cache::put('key','value',$minutes);
Cache::add('key','value',$minutes);
Cache::forever('key','value');
Cache::remember('key',$minutes,function(){return'value'});
Cache::rememberForever('key',function(){return'value'});
Cache::forget('key');
Cache::has('key');
Cache::get('key');
Cache::get('key','default');
Cache::get('key',function(){return'default';});
Cache::increment('key');
Cache::increment('key',$amount);
Cache::decrement('key');
Cache::decrement('key',$amount);
Cache::section('group')->put('key',$value);
Cache::section('group')->get('key');
Cache::section('group')->flush();
Cookies
Cookie::get('key');
//Createacookiethatlastsforever
Cookie::forever('key','value');
//Sendacookiewitharesponse
$response=Response::make('HelloWorld');
$response->withCookie(Cookie::make('name','value',$minutes));
Sessions
Session::get('key');
Session::get('key','default');
Session::get('key',function(){return'default';});
Session::put('key','value');
Session::all();
Session::has('key');
Session::forget('key');
Session::flush();
Session::regenerate();
Session::flash('key','value');
Session::reflash();
Session::keep(array('key1','key2'));
Requests
Request::path();
Request::is('foo/*');
Request::url();
Request::segment(1);
Request::header('Content-Type');
Request::server('PATH_INFO');
Request::ajax();
Request::secure();
Responses
returnResponse::make($contents);
returnResponse::make($contents,200);
returnResponse::json(array('key'=>'value'));
returnResponse::json(array('key'=>'value'))
->setCallback(Input::get('callback'));
returnResponse::download($filepath);
returnResponse::download($filepath,$filename,$headers);
//Createaresponseandmodifyaheadervalue
$response=Response::make($contents,200);
$response->header('Content-Type','application/json');
return$response;
//Attachacookietoaresponse
returnResponse::make($content)
->withCookie(Cookie::make('key','value'));
Redirects
returnRedirect::to('foo/bar');
returnRedirect::to('foo/bar')->with('key','value');
returnRedirect::to('foo/bar')->withInput(Input::get());
returnRedirect::to('foo/bar')->withInput(Input::except('password'));
returnRedirect::to('foo/bar')->withErrors($validator);
returnRedirect::back();
returnRedirect::route('foobar');
returnRedirect::route('foobar',array('value'));
returnRedirect::route('foobar',array('key'=>'value'));
returnRedirect::action('FooController@index');
returnRedirect::action('FooController@baz',array('value'));
returnRedirect::action('FooController@baz',array('key'=>'value'));
//Ifintendedredirectisnotdefined,defaultstofoo/bar.
returnRedirect::intended('foo/bar');
IoC
App::bind('foo',function($app){returnnewFoo;});
App::make('foo');
//Ifthisclassexists,it'sreturned
App::make('FooBar');
App::singleton('foo',function(){returnnewFoo;});
App::instance('foo',newFoo);
App::bind('FooRepositoryInterface','BarRepository');
App::register('FooServiceProvider');
//Listenforobjectresolution
App::resolving(function($object){});
Security
Passwords
Hash::make('secretpassword');
Hash::check('secretpassword',$hashedPassword);
Hash::needsRehash($hashedPassword);
Auth
//Checkiftheuserisloggedin
Auth::check();
Auth::user();
Auth::attempt(array('email'=>$email,'password'=>$password));
//Rememberuserlogin
Auth::attempt($credentials,true);
//Loginforasinglerequest
Auth::once($credentials);
Auth::login(User::find(1));
Auth::loginUsingId(1);
Auth::logout();
Auth::validate($credentials);
Auth::basic('username');
Auth::onceBasic();
Password::remind($credentials,function($message,$user){});
Encryption
Crypt::encrypt('secretstring');
Crypt::decrypt($encryptedString);
Crypt::setMode('ctr');
Crypt::setCipher($cipher);
Validation
Validator::make(
array('key'=>'Foo'),
array('key'=>'required|in:Foo')
);
Validator::extend('foo',function($attribute,$value,$params){});
Validator::extend('foo','FooValidator@validate');
Validator::resolver(function($translator,$data,$rules,$msgs)
{
returnnewFooValidator($translator,$data,$rules,$msgs);
});
ValidationRules
accepted
active_url
after:YYYY-MM-DD
before:YYYY-MM-DD
alpha
alpha_dash
alpha_num
between:1,10
confirmed
date
date_format:YYYY-MM-DD
different:fieldname
email
exists:table,column
image
in:foo,bar,baz
not_in:foo,bar,baz
integer
numeric
ip
max:value
min:value
mimes:jpeg,png
regex:[0-9]
required
required_if:field,value
required_with:foo,bar,baz
required_without:foo,bar,baz
same:field
size:value
unique:table,column,except,idColumn
url
Views
View::make('path/to/view');
View::make('foo/bar')->with('key','value');
View::make('foo/bar',array('key'=>'value'));
View::exists('foo/bar');
//Shareavalueacrossallviews
View::share('key','value');
//Nestingviews
View::make('foo/bar')->nest('name','foo/baz',$data);
//Registeraviewcomposer
View::composer('viewname',function($view){});
//Registermultipleviewstoacomposer
View::composer(array('view1','view2'),function($view){});
//Registeracomposerclass
View::composer('viewname','FooComposer');
View::creator('viewname',function($view){});
BladeTemplates
@extends('layout.name')
@section('name')//Beginasection
@stop//Endasection
@show//Endasectionandthenshowit
@yield('name')//Showasectionnameinatemplate
@include('view.name')
@include('view.name',array('key'=>'value'));
@lang('messages.name')
@choice('messages.name',1);
@if
@else
@elseif
@endif
@unless
@endunless
@for
@endfor
@foreach
@endforeach
@while
@endwhile
{{$var}}//Echocontent
{{{$var}}}//Echoescapedcontent
{{--BladeComment--}}
Forms
Form::open(array('url'=>'foo/bar','method'=>'PUT'));
Form::open(array('route'=>'foo.bar'));
Form::open(array('route'=>array('foo.bar',$parameter)));
Form::open(array('action'=>'FooController@method'));
Form::open(array('action'=>array('FooController@method',$parameter)));
Form::open(array('url'=>'foo/bar','files'=>true));
Form::token();
Form::model($foo,array('route'=>array('foo.bar',$foo->bar)));
Form::close;
FormElements
Form::label('id','Description');
Form::label('id','Description',array('class'=>'foo'));
Form::text('name');
Form::text('name',$value);
Form::textarea('name');
Form::textarea('name',$value);
Form::textarea('name',$value,array('class'=>'name'));
Form::hidden('foo',$value);
Form::password('password');
Form::email('name',$value,array());
Form::file('name',array());
Form::checkbox('name','value');
Form::radio('name','value');
Form::select('name',array('key'=>'value'));
Form::select('name',array('key'=>'value'),'key');
Form::submit('Submit!');
FormMacros
Form::macro('fooField',function()
{return'<inputtype="custom"/>';});
Form::fooField();
HTMLBuilder
HTML::macro('name',function(){});
HTML::entities($value);
HTML::decode($value);
HTML::script($url,$attributes);
HTML::style($url,$attributes);
HTML::link($url,'title',$attributes,$secure);
HTML::secureLink($url,'title',$attributes);
HTML::linkAsset($url,'title',$attributes,$secure);
HTML::linkSecureAsset($url,'title',$attributes);
HTML::linkRoute($name,'title',$parameters,$attributes);
HTML::linkAction($action,'title',$parameters,$attributes);
HTML::mailto($email,'title',$attributes);
HTML::email($email);
HTML::ol($list,$attributes);
HTML::ul($list,$attributes);
HTML::listing($type,$list,$attributes);
HTML::listingElement($key,$type,$value);
HTML::nestedListing($key,$type,$value);
HTML::attributes($attributes);
HTML::attributeElement($key,$value);
HTML::obfuscate($value);
Strings
//TransliterateaUTF-8valuetoASCII
Str::ascii($value)
Str::camel($value)
Str::contains($haystack,$needle)
Str::endsWith($haystack,$needles)
//Capastringwithasingleinstanceofagivenvalue.
Str::finish($value,$cap)
Str::is($pattern,$value)
Str::length($value)
Str::limit($value,$limit=100,$end='...')
Str::lower($value)
Str::words($value,$words=100,$end='...')
Str::plural($value,$count=2)
//Generateamoretruly"random"alpha-numericstring.
Str::random($length=16)
//Generatea"random"alpha-numericstring.
Str::quickRandom($length=16)
Str::upper($value)
Str::title($value)
Str::singular($value)
Str::slug($title,$separator='-')
Str::snake($value,$delimiter='_')
Str::startsWith($haystack,$needles)
//Convertavaluetostudlycapscase.
Str::studly($value)
Str::macro($name,$macro)
Helpers
Arrays
array_add($array,'key','value');
array_build($array,function(){});
array_divide($array);
array_dot($array);
array_except($array,array('key'));
array_fetch($array,'key');
array_first($array,function($key,$value){},$default);
//Stripskeysfromthearray
array_flatten($array);
array_forget($array,'foo');
//Dotnotation
array_forget($array,'foo.bar');
array_get($array,'foo','default');
array_get($array,'foo.bar','default');
array_only($array,array('key'));
//Returnarrayofkey=>values
array_pluck($array,'key');
//Returnandremove'key'fromarray
array_pull($array,'key');
array_set($array,'key','value');
//Dotnotation
array_set($array,'key.subkey','value');
array_sort($array,function(){});
//Firstelementofanarray
head($array);
//Lastelementofanarray
last($array);
Paths
app_path();
public_path();
//Approotpath
base_path();
storage_path();
Strings
camel_case($value);
class_basename($class);
//Escapeastring
e('<html>');
starts_with('Foobar.','Foo');
ends_with('Foobar.','bar.');
snake_case('fooBar');
str_contains('Hellofoobar.','foo');
//Result:foo/bar/
str_finish('foo/bar','/');
str_is('foo*','foobar');
str_plural('car');
str_random(25);
str_singular('cars');
//Result:FooBar
studly_case('foo_bar');
trans('foo.bar');
trans_choice('foo.bar',$count);
URLsandLinks
action('FooController@method',$parameters);
link_to('foo/bar',$title,$attributes,$secure);
link_to_asset('img/foo.jpg',$title,$attributes,$secure);
link_to_route('route.name',$title,$parameters,$attributes);
link_to_action('FooController@method',$title,$params,$attrs);
//HTMLLink
asset('img/photo.jpg',$title,$attributes);
//HTTPSlink
secure_asset('img/photo.jpg',$title,$attributes);
secure_url('path',$parameters);
route($route,$parameters,$absolute=true);
url('path',$parameters=array(),$secure=null);
Miscellaneous
csrf_token();
dd($value);
value(function(){return'bar';});
with(newFoo)->chainedMethod();*/
